<?php


class InputfieldDatetimeAdvanced extends InputfieldDatetime implements Module {
	public static function getModuleInfo() {
		return array(
			"title"			=>	"Advanced Datetime Inputfield",
			"summary"		=>	wire()->_("Will be installed by Fieldtype Datetime Advanced"),
			"version"		=>	"1.0.3",
		);
	}


	public function renderReady(Inputfield $parent = null, $renderValueMode = false) {
		parent::renderReady($parent, $renderValueMode);
		
		$url = $this->config->urls->InputfieldDatetime;
		$name = "InputfieldDatetime" . ($this->config->debug ? "" : ".min");

		$this->config->scripts->add($url . $name . ".js");
		$this->config->styles->add($url . "InputfieldDatetime.css");
	}

	/**
	 * Render the date/time inputfield
	 * 
	 * @return string
	 *
	 */
	public function ___render() {
	
		$sanitizer = $this->wire('sanitizer');
		$datetime = $this->wire('datetime');
		list($dateFormat, $timeFormat) = $this->getInputFormats();
		$useTime = false;
		if(strlen($timeFormat) && $this->datepicker && $this->datepicker != self::datepickerInline) $useTime = true; 

		$attrs = $this->getAttributes();
		$value = (string)$attrs['value'];
		$valueTS = (int) $value*1000; // TS=for datepicker/javascript, which uses milliseconds rather than seconds
		unset($attrs['value']);

		if(!$value && $this->defaultToday) {
			$value = date($dateFormat);
			if($timeFormat) $value .= ' ' . date($timeFormat);
			$valueTS = time()*1000;

		} else if($value) {
			$value = trim(date($dateFormat . ' ' . $timeFormat, (int) $value));
		}

		$value = htmlspecialchars($value, ENT_QUOTES, 'UTF-8');

		$dateFormatJS = $sanitizer->entities($datetime->convertDateFormat($dateFormat, 'js'));
		$timeFormatJS = $useTime ? $datetime->convertDateFormat($timeFormat, 'js') : '';

		if(strpos($timeFormatJS, 'h24') !== false) {
			// 24 hour format
			$timeFormatJS = str_replace(array('hh24', 'h24'), array('HH', 'H'), $timeFormatJS);
			$ampm = 0;
		} else {
			$ampm = 1;
		}

		if(strlen($timeFormatJS)) $timeFormatJS = $sanitizer->entities($timeFormatJS);
		if(empty($value)) $value = '';
		$yearRange = $sanitizer->entities($this->yearRange);

		$out = 	"\n" .
			"<input " . $this->getAttributesString($attrs) . " " .
			"value='$value' " .
			"data-dateformat='$dateFormatJS' " .
			"data-timeformat='$timeFormatJS' " .
			"data-timeselect='$this->timeInputSelect' " . 
			"data-ts='$valueTS' " .
			"data-ampm='$ampm' " .
			(strlen($yearRange) ? "data-yearrange='$yearRange' " : '') .
			"/>";

		return $out;
	}

	/**
	 * Render value for presentation, non-input
	 *
	 */
	public function ___renderValue() {
		$value = $this->attr('value'); 
		if(!$value) return '';
		$format = trim($this->dateInputFormat . ' ' . $this->timeInputFormat); 
		return $this->wire('datetime')->formatDate((string)$value, trim($format));
	}

	/**
	 * Capture setting of the 'value' attribute and convert string dates to unix timestamp
	 * 
	 * @param string $key
	 * @param mixed $value
	 * @return $this
	 *
	 */
	public function setAttribute($key, $value) {
		if($key == 'value') {
			$value = $this->wire('datetime')->stringToTimestamp((string)$value, $this->getInputFormats(true));
		}
		return parent::setAttribute($key, $value); 
	}


}

